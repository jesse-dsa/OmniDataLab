name: CI - OmniDataLab (Otimizado)

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["main"]

jobs:
  lint:
    name: "Linting e Formata√ß√£o"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache de depend√™ncias
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            venv/
          key: lint-${{ runner.os }}-py3.10-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            lint-${{ runner.os }}-py3.10-

      - name: Listar arquivos no reposit√≥rio
        run: ls -la

      - name: Instalar depend√™ncias de desenvolvimento
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-dev.txt

      - name: Verificar formata√ß√£o (Black)
        run: black --check --diff .

      - name: Verificar estilo (Flake8)
        run: flake8 . --show-source --statistics

  test_postgresql_connection:
    name: Teste de Conex√£o com PostgreSQL
    runs-on: ubuntu-latest  # Ou o sistema que voc√™ estiver usando

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Instalar depend√™ncias
        run: |
          pip install psycopg2-binary
          pip install pytest

      - name: Rodar teste de conex√£o com o PostgreSQL
        run: |
          python -m pytest test_postgresql_connection.py

  test:
    name: "Testes (Python ${{ matrix.python-version }})"
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        include:
          - python-version: "3.9"
            experimental: false
          - python-version: "3.10"
            experimental: false
          - python-version: "3.11"
            experimental: true
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            venv/
          key: test-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            test-${{ runner.os }}-py${{ matrix.python-version }}-

      - name: Instalar depend√™ncias
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install pytest pytest-cov

      - name: Executar testes
        run: |
          pytest tests/ \
            --cov=src/ \
            --cov-report=xml \
            --junitxml=test-results-${{ matrix.python-version }}.xml
        continue-on-error: ${{ matrix.experimental }}

      - name: Upload cobertura para Codecov
        if: ${{ !matrix.experimental || (matrix.experimental && success()) }}
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true

      - name: Salvar relat√≥rio de testes
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-py${{ matrix.python-version }}
          path: |
            test-results-${{ matrix.python-version }}.xml
            coverage.xml

  security:
    name: "Verifica√ß√£o de Seguran√ßa"
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
     
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Verificar vulnerabilidades
        run: |
          python -m pip install safety
          safety check --full-report

  notify:
    name: "Notifica√ß√£o"
    if: always()
    needs: [lint, test, security]
    runs-on: ubuntu-latest
    steps:
      - name: Notificar Slack
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: "danger"
          SLACK_TITLE: "Falha no CI (OmniDataLab)"
          SLACK_MESSAGE: "Falha no workflow ${{ github.workflow }}"
          SLACK_FOOTER: "Commit: ${{ github.sha }} | Detalhes: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: Notificar sucesso
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: "good"
          SLACK_TITLE: "CI Aprovado (OmniDataLab)"
          SLACK_MESSAGE: "Todos os jobs passaram! üéâ"
          SLACK_FOOTER: "Commit: ${{ github.sha }} | Detalhes: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
